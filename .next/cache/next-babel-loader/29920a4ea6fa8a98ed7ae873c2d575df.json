{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport EventListener from 'react-event-listener';\n\nconst SailingScrollDown = ({\n  text,\n  windows\n}) => {\n  const sailingScrollDownEl = useRef(null);\n\n  if (sailingScrollDownEl.current) {\n    const clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n  }\n\n  const [targetBox, setTargetBox] = useState({\n    fixedPoint: 0,\n    width: 0,\n    height: 0,\n    top: 0\n  });\n  const [isFixed, setIsFixed] = useState(false);\n  const [isFeature, setIsFeature] = useState(false);\n\n  const handleScroll = () => {\n    let timer = 200;\n\n    if (timer > 0) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      if (sailingScrollDownEl.current) {\n        const clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n\n        if (clientRect) {\n          setTargetBox(_objectSpread({}, targetBox, {\n            width: clientRect.width,\n            height: clientRect.height,\n            top: clientRect.top\n          }));\n        }\n      }\n    }, timer);\n    const {\n      scrollTop,\n      width,\n      vw,\n      vh\n    } = windows;\n    const isSmartPhone = width < 768;\n    let headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    const point = targetBox.fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  };\n\n  const handleResize = () => {\n    const scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) || 0;\n    setIsFixed(false);\n    const {\n      width\n    } = windows;\n    const isSmartPhone = width < 768;\n    let headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    if (sailingScrollDownEl.current) {\n      const clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n\n      if (clientRect) {\n        setTargetBox(_objectSpread({}, targetBox, {\n          fixedPoint: clientRect.top + scrollTop\n        }));\n      }\n    }\n\n    const point = targetBox.fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      width\n    } = windows;\n    const isSmartPhone = width < 768;\n    let headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    const scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) || 0;\n    let fixedPoint = 0;\n\n    if (sailingScrollDownEl.current) {\n      const clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n      fixedPoint = clientRect.top + scrollTop;\n\n      if (clientRect) {\n        setTargetBox({\n          fixedPoint: fixedPoint,\n          width: clientRect.width,\n          height: clientRect.height,\n          top: clientRect.top\n        });\n      }\n    }\n\n    const point = fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    ref: sailingScrollDownEl,\n    className: clsx({\n      sailingScrollDown: true,\n      fixed: isFixed,\n      feature: isFeature\n    })\n  }, React.createElement(EventListener, {\n    target: \"window\",\n    onScroll: handleScroll,\n    onResize: handleResize\n  }), React.createElement(\"div\", {\n    className: \"sailingScrollDown__inner\"\n  }, React.createElement(\"span\", {\n    className: \"sailingScrollDown__txt\"\n  }, text)), React.createElement(\"span\", {\n    className: \"sailingScrollDown__arrow\"\n  }));\n};\n\nexport default SailingScrollDown;","map":null,"metadata":{},"sourceType":"module"}