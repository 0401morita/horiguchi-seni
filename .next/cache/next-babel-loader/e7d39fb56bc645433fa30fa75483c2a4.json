{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport EventListener from 'react-event-listener';\n\nvar SailingScrollDown = function SailingScrollDown(_ref) {\n  var text = _ref.text,\n      windows = _ref.windows;\n  var sailingScrollDownEl = useRef(null);\n\n  if (sailingScrollDownEl.current) {\n    var clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n  }\n\n  var _useState = useState({\n    fixedPoint: 0,\n    width: 0,\n    height: 0,\n    top: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      targetBox = _useState2[0],\n      setTargetBox = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFixed = _useState4[0],\n      setIsFixed = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFeature = _useState6[0],\n      setIsFeature = _useState6[1];\n\n  var handleScroll = function handleScroll() {\n    var timer = 200;\n\n    if (timer > 0) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      if (sailingScrollDownEl.current) {\n        var _clientRect = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n\n        if (_clientRect) {\n          setTargetBox(_objectSpread({}, targetBox, {\n            width: _clientRect.width,\n            height: _clientRect.height,\n            top: _clientRect.top\n          }));\n        }\n      }\n    }, timer);\n    var scrollTop = windows.scrollTop,\n        width = windows.width,\n        vw = windows.vw,\n        vh = windows.vh;\n    var isSmartPhone = width < 768;\n    var headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    var point = targetBox.fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  };\n\n  var handleResize = function handleResize() {\n    var scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) || 0;\n    setIsFixed(false);\n    var width = windows.width;\n    var isSmartPhone = width < 768;\n    var headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    if (sailingScrollDownEl.current) {\n      var _clientRect2 = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n\n      if (_clientRect2) {\n        setTargetBox(_objectSpread({}, targetBox, {\n          fixedPoint: _clientRect2.top + scrollTop\n        }));\n      }\n    }\n\n    var point = targetBox.fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  };\n\n  useEffect(function () {\n    var width = windows.width;\n    var isSmartPhone = width < 768;\n    var headerHeight = 76;\n\n    if (isSmartPhone) {\n      headerHeight = 56;\n    }\n\n    var scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) || 0;\n    var fixedPoint = 0;\n\n    if (sailingScrollDownEl.current) {\n      var _clientRect3 = sailingScrollDownEl.current ? sailingScrollDownEl.current.getBoundingClientRect() : null;\n\n      fixedPoint = _clientRect3.top + scrollTop;\n\n      if (_clientRect3) {\n        setTargetBox({\n          fixedPoint: fixedPoint,\n          width: _clientRect3.width,\n          height: _clientRect3.height,\n          top: _clientRect3.top\n        });\n      }\n    }\n\n    var point = fixedPoint - headerHeight - 4;\n\n    if (point < scrollTop) {\n      setIsFixed(true);\n    } else {\n      setIsFixed(false);\n    }\n\n    if (point < scrollTop - targetBox.height / 2) {\n      setIsFeature(true);\n    } else {\n      setIsFeature(false);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    ref: sailingScrollDownEl,\n    className: clsx({\n      sailingScrollDown: true,\n      fixed: isFixed,\n      feature: isFeature\n    })\n  }, React.createElement(EventListener, {\n    target: \"window\",\n    onScroll: handleScroll,\n    onResize: handleResize\n  }), React.createElement(\"div\", {\n    className: \"sailingScrollDown__inner\"\n  }, React.createElement(\"span\", {\n    className: \"sailingScrollDown__txt\"\n  }, text)), React.createElement(\"span\", {\n    className: \"sailingScrollDown__arrow\"\n  }));\n};\n\nexport default SailingScrollDown;","map":null,"metadata":{},"sourceType":"module"}